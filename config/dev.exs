import Config

# Configure your database
config :dynamic_router, DynamicRouter.Repo,
  username: "dynamic_router_dev",
  password: "Dynamic",
  hostname: "localhost",
  database: "dynamic_router_dev",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with esbuild to bundle .js and .css sources.
config :dynamic_router, DynamicRouterWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "JmYEZ3xxgsXTd++n8nCAYApbrT0p9+8vshpcEXXwHYbKtQ0sBdEVI6rPXbdDchbz",
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :dynamic_router, DynamicRouterWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/dynamic_router_web/(live|views)/.*(ex)$",
      ~r"lib/dynamic_router_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :ecto_gen,
  otp_app: :dynamic_router,
  db_config: DynamicRouter.Repo,
  # relative path should be relative to the project root
  output_location: "lib/dynamic_router/database",
  # Module prefix that will be used for generated content
  output_module: "DynamicRouter.Database",

  # This way, you can provide custom template for individual parts of generation
  # default files are in /priv/templates directory of this package
  # template_overrides: [
  #   db_module: "/path/to/db_module.ex.eex",
  #   routine: "/path/to/db_routine.ex.eex",
  #   routine_result: "/path/to/db_routine_result.ex.eex",
  #   routine_parser: "/path/to/db_routine_parser.ex.eex"
  # ],

  # This config holds information about what routines (funcs) from database will have generated elixir functions etc.
  # db project has keys, each representing database's schema which has config for what routines it includes/ingores
  db_project: [
    const: [
      funcs: "*",
      # makes sense to specify ignored functions (routines) only when funcs equal "*"
      ignored_funcs: []
    ],
    internal: [
      funcs: "*",
      # makes sense to specify ignored functions (routines) only when funcs equal "*"
      ignored_funcs: []
    ],
    public: [
      # or ["func_name_1", "func_name_2"]
      funcs: "*",

      # makes sense to specify ignored functions (routines) only when funcs equal "*"
      ignored_funcs: []
    ]
  ]
